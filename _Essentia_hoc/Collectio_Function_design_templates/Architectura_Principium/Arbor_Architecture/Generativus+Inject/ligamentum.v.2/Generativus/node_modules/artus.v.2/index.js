'use strict';

const artus = (communis, fn) => {

  communis.closureForFn = communis.preComutClosure(communis.closureForFn);

  const exitus = function(...args) {

    const bfn = fn.bind(communis.thisForFn);
    const ostium = {
      bfn: bfn,
      args: args,
      closureForFn: communis.closureForFn,
      thisForFn: communis.thisForFn,
    };

    exitus.getOstium = () => ostium;
    // comutatus fn
    const moresFn = communis.closureToMoresFn(bfn, communis.closureForFn);
    // comutatus closure
    communis.closureForFn = communis.comutClosure(communis.closureForFn);
    // reditum moresFn
    communis.returnBfn(moresFn, communis.closureForFn)(...args);
    Object.assign(exitus, ostium);
  };
  for (const key in communis.objProto) {
    if (communis.objProto.hasOwnProperty(key)) communis.os.prototype[key] = communis.objProto[key];
  }

  Object.setPrototypeOf(exitus, communis.os.prototype);
  return Object.assign(exitus, communis.methods);
};


module.exports = {
  artus,
};
