'use strict';

const { artus } = require('artus.v.2');

const objProto = {
  printFn() {
    console.log(generativusFucus.propObj.closureForFn.bfn);
    return this;
  },
  limit(max) {
    communis.closureForFn.context.max = max;
    return this;
  },
  timer(msec) {
    const ms = communis.closureForFn.time.msec = msec;
    const timer_ = setTimeout(() => {
      communis.closureForFn.flags.kill = true;
      timer_.close();
    }, ms);
    return this;
  }
};

const internus = () => {
};

const communis = {
  internus,
  os: function() {
  },
  objProto,
  preComutClosure: (closureForFn) => closureForFn,
  comutClosure: (closureForFn) => closureForFn,
  closureToMoresFn: (bfn, closureForFn) => (closureForFn, bfn),
  returnBfn: (bfn, closureForFn) => (closureForFn, bfn),
  methods: {},
  closureForFn: {
    context: {
      max: 0,
      counter: 0,
    },
    time: { msec: 0, },
    timer: {
      timeout: null,
      interval: null,
    },
    flags: {
      kill: false,
    }
  },
  thisForFn: {},
};


communis.returnBfn = (bfn, closureForFn) => {
  if (!closureForFn.flags.kill) {
    return bfn;
  } else return () => undefined;
};

communis.comutClosure = (closureForFn) => {
  if (closureForFn.context.counter === closureForFn.context.max) closureForFn.flags.kill = true;
  else closureForFn.context.counter++;
  return closureForFn;
};

communis.methods = {
  // printFn() {
  //   console.log(generativusFucus.propObj.closureForFn.bfn);
  //   return this;
  // },
  // limit(max) {
  //   communis.closureForFn.context.max = max;
  //   return this;
  // },
  // timer(msec) {
  //   const ms = communis.closureForFn.time.msec = msec;
  //   const timer_ = setTimeout(() => {
  //     communis.closureForFn.flags.kill = true;
  //     timer_.close();
  //   }, ms);
  //   return this;
  // }
};


// propObj.closureForFn.context.max = 2;

// const fn = function(...args) {
//   console.dir({ args, this: this });
// };

// Use
// const fucus = generativusFucus(propObj, fn).limit(2).timer(200);
// fucus(0);
// setTimeout(() => {
//   fucus('primus');
// }, 100);
//
// setTimeout(() => {
//   fucus('secundus');
// }, 500);

const timer = artus.bind(null, communis);

module.exports = { timer };
