'use strict';

const { generativusFucus } = require('artus');

const propObj = {
  preComutClosure: (closureForFn) => closureForFn,
  comutClosure: (closureForFn) => closureForFn,
  closureToMoresFn: (bfn, closureForFn) => (closureForFn, bfn),
  returnBfn: (bfn, closureForFn) => (closureForFn, bfn),
  methods: {},
  closureForFn: {
    context: {
      max: 0,
      counter: 0,
    },
    time: { msec: 0, },
    timer: {
      timeout: null,
      interval: null,
    },
    flags: {
      kill: false,
    }
  },
  thisForFn: {},
};

generativusFucus.propObj.returnBfn = (bfn, closureForFn) => {
  if (!closureForFn.flags.kill) {
    return bfn;
  } else return () => undefined;
};

generativusFucus.propObj.comutClosure = (closureForFn) => {
  if (closureForFn.context.counter === closureForFn.context.max) closureForFn.flags.kill = true;
  else closureForFn.context.counter++;
  return closureForFn;
};

generativusFucus.propObj.methods = {
  printFn() {
    console.log(generativusFucus.propObj.closureForFn.bfn);
    return this;
  },
  limit(max = 0) {
    generativusFucus.propObj.closureForFn.context.max = max;
    return this;
  },
  timer(msec = 0) {
    const ms = generativusFucus.propObj.closureForFn.time.msec = msec;
    const timer_ = setTimeout(() => {
      generativusFucus.propObj.closureForFn.flags.kill = true;
      timer_.close();
    }, ms);
    return this;
  },
  cancel() {
    generativusFucus.propObj.closureForFn.flags.kill = true;
  },
  resume() {
    generativusFucus.propObj.closureForFn.flags.kill = false;
  },
};


// propObj.closureForFn.context.max = 2;

// const fn = function(...args) {
//   console.dir({ args, this: this });
// };

// Use
// debugger
// const fucus = generativusFucus(propObj, fn).limit(3).timer(200);
// fucus('a');
// console.dir(fucus.closureForFn.flags.kill);
// fucus.cancel();
// fucus('b');
// console.dir(fucus.closureForFn.flags.kill);
// fucus.resume();
// fucus('c');
// console.dir(fucus.closureForFn.flags.kill);
// debugger

const extend = generativusFucus.bind(null, generativusFucus.propObj);

module.exports = { extend };
