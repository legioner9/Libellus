'use strict';

const { generativusFucus } = require('artus');

generativusFucus.propObj.returnBfn = (bfn, closureForFn) => {
  if (!closureForFn.flags.kill) {
    return bfn;
  } else return () => undefined;
};

generativusFucus.propObj.comutClosure = (closureForFn) => {
  if (closureForFn.context.counter === closureForFn.context.max) closureForFn.flags.kill = true;
  else closureForFn.context.counter++;
  return closureForFn;
};

generativusFucus.propObj.methods = {
  printFn() {
    console.log(generativusFucus.propObj.closureForFn.bfn);
    return this;
  },
  limit(max) {
    generativusFucus.propObj.closureForFn.context.max = max;
    return this;
  },
  timer(msec) {
    const ms = generativusFucus.propObj.closureForFn.time.msec = msec;
    const timer_ = setTimeout(() => {
      generativusFucus.propObj.closureForFn.flags.kill = true;
      timer_.close();
    }, ms);
    return this;
  }
};


// propObj.closureForFn.context.max = 2;

const fn = function(...args) {
  console.dir({ args, this: this });
};

// Use
// const fucus = generativusFucus(propObj, fn).limit(2).timer(200);
// fucus(0);
// setTimeout(() => {
//   fucus('primus');
// }, 100);
//
// setTimeout(() => {
//   fucus('secundus');
// }, 500);

const timer = generativusFucus.bind(null, generativusFucus.propObj);

module.exports = { timer };
