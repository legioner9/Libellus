'use strict';

const { memoizeAsync } = require('artus.v.2');

const props = {
  cache: new Map(),
  timeout: 0,
  limit: 0,
  size: 0,
  maxSize: 0,
  maxCount: 0,
  events: {
    timeout: null,
    memoize: null,
    overflow: null,
    add: null,
    del: null,
    clear: null,
  },
};

const objProto = {
  clear() {
    this.cache.clear();
  },
  add(key, err, data) {
    this.emit('add', err, data);
    this.cache.set(key, { err, data });
    return this;
  },
  del(key) {
    this.emit('del', key);
    this.cache.delete(key);
    return this;
  },
  get(key, callback) {
    const record = this.cache.get(key);
    callback(record.err, record.data);
    return this;
  },
  on(eventName, listener) {
    if (eventName in this.events) {
      this.events[eventName] = listener;
    }
  },
  emit(eventName, ...args) {
    const event = this.events[eventName];
    if (event) event(...args);
  }
};

const internus = function(memoized, communis, fn, ...args) {
  const callback = args.pop();
  debugger
  const key = communis.alius.generateKey(args);
  const value = communis.props.cache.get(key);
  debugger
  if (communis.props.cache.has(key)) {
    console.log(`from cache key: ${key}`);
    callback(value.err, value.data);
    return;
  }
  fn(...args, (err, data) => {
    // cache.set(key, { err, data });
    memoized.add(key, err, data);
    memoized.emit('memoize', key, err, data);
    if (communis.props.cache.size > communis.lengthCache) {
      const firstKey = communis.props.cache.keys().next().value;
      console.log(`cache deleted key: ${firstKey}`);
      communis.props.cache.delete(firstKey);
    }
    console.log(`callback called with args: ${err},${data}`);
    callback(err, data);
  });
};

const communis = {
  alius: {
    getKey(x) {
      return x.toString() + ':' + typeof x;
    },
    generateKey(arr) {
      const crypto = require('crypto');
      const key = arr.map(this.getKey).join('|');
      return crypto.createHash('sha256').update(key).digest('hex');
    },
  },
  internus,
  os: function() {
  },
  lengthCache: 1,
  props,
  objProto,
};

// Usu
// const fn = (x, callback) => {
//   if (typeof x !== 'number') callback('argument is not a number');
//   callback(null, x);
// };
// const callback = (...args) => args;

// const mfn = memoizeAsync(communis, fn);
//
// mfn.on('add', (...data) => {
//   console.log('event add called with: ', data);
// });
// // mfn.addPrototypes(objProto);
//
// mfn(1, callback);
// debugger
// mfn.clear();
// debugger
// mfn(1, callback);
// mfn(1, callback);
// debugger
// mfn(2, callback);
// debugger

const ret = memoizeAsync.bind(null, communis);

module.exports = ret;
