'use strict';

const crypto = require('crypto');

const getKey = (x) => x.toString() + ':' + typeof x;

const generateKey = (arr) => {
  const key = arr.map(getKey).join('|');
  return crypto.createHash('sha256').update(key).digest('hex');
};

const Memoized = function() {
};

const memoizeAsync = (fn, length = 2) => {
  const cache = new Map();
  const memoized = (...args) => {

    const callback = args.pop();
    const key = generateKey(args);
    const value = cache.get(key);
    if (cache.has(key)) {
      console.log(`from cache key: ${key}`);
      callback(value.err, value.data);
      return;
    }
    fn(...args, (err, data) => {
      // cache.set(key, { err, data });
      memoized.add(key, err, data);
      memoized.emit('memoize', key, err, data);
      if (cache.size >= length) {
        const firstKey = cache.keys().next().value;
        console.log(`cache deleted key: ${firstKey}`);
        cache.delete(firstKey);
      }
      console.log(`callback called with args: ${err},${data}`);
      callback(err, data);
    });
  };
  const props = {
    cache,
    timeout: 0,
    limit: 0,
    size: 0,
    maxSize: 0,
    maxCount: 0,
    events: {
      timeout: null,
      memoize: null,
      overflow: null,
      add: null,
      del: null,
      clear: null,
    },
  };

  memoized.addPrototypes = function(objProto) {
    for (const key in objProto) {
      Memoized.prototype[key] = objProto[key];
    }
    return this;
  };

  memoized.addEventName = function(name = '') {
    props.events[name] = null;
    return this;
  };

  memoized.setProperties = function(name, props) {
    props[name] = props;
    return this;
  };

  Object.setPrototypeOf(memoized, Memoized.prototype);
  return Object.assign(memoized, props);
};

module.exports = { memoizeAsync }
