'use strict';

let fascis = {
  preComutClosure: (closureForFn) => closureForFn,
  comutClosure: (closureForFn) => closureForFn,
  closureToMoresFn: (bfn, closureForFn) => (closureForFn, bfn),
  returnBfn: (bfn, closureForFn) => (closureForFn, bfn),
};

const operati = {
  closureForFn: {
    context: {
      max: 0,
      counter: 0,
    },
    time: { msec: 0, },
    timer: {
      timeout: null,
      interval: null,
    },
    flags: {
      kill: false,
    }
  },
  thisForFn: {},
};

const artus = (fn) => {

  const methods = {};

  operati.closureForFn = fascis.preComutClosure(operati.closureForFn);

  const exitus = function(...args) {

    const bfn = fn.bind(operati.thisForFn);

    const properties = {
      bfn: bfn,
      args: args,
      closureForFn: operati.closureForFn,
      thisForFn: operati.thisForFn,
    };
    exitus.getOperati = () => properties;
    const moresFn = fascis.closureToMoresFn(bfn, operati.closureForFn);
    // comutatus closure
    operati.closureForFn = fascis.comutClosure(operati.closureForFn);
    // reditum moresFn
    fascis.returnBfn(moresFn, operati.closureForFn)(...args);


  };
  exitus.setFascis = (obj = fascis) => fascis = obj;
  Object.assign(exitus, methods);

};


module.exports = { artus };
