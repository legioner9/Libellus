'use strict';

const { artus } = require('artus');

const objProto = {
  printBFn() {
    console.log(this.getOstium().bfn);
    return this;
  },
  setLimit(max) {
    communis.closureForFn.context.max = max;
    return this;
  },
  setTimer(msec) {
    const ms = communis.closureForFn.time.msec = msec;
    const timer_ = setTimeout(() => {
      communis.closureForFn.flags.kill = true;
      timer_.close();
    }, ms);
    return this;
  }
};

const internus = (exitus, communis, bfn, ...args) => {
  // comutatus fn
  const moresFn = communis.closureToMoresFn(bfn, communis.closureForFn);
  // comutatus closure
  communis.closureForFn = communis.comutClosure(communis.closureForFn);
  // reditum moresFn
  communis.returnBfn(moresFn, communis.closureForFn)(...args);
  // more action ...
};

const communis = {
  alius: {
    method() {
    },
  },
  internus,
  anteExitus: (closureForFn) => closureForFn,
  comutClosure: (closureForFn) => closureForFn,
  closureToMoresFn: (bfn, closureForFn) => (closureForFn, bfn),
  returnBfn: (bfn, closureForFn) => () => {
  },
  os: function() {
  },
  objProto,
  closureForFn: {
    context: {
      max: 0,
      counter: 0,
    },
    time: { msec: 0, },
    timer: {
      timeout: null,
      interval: null,
    },
    flags: {
      kill: false,
    }
  },
  thisForFn: {},
};

communis.returnBfn = (bfn, closureForFn) => {
  if (!closureForFn.flags.kill) {
    return bfn;
  } else return () => undefined;
};

communis.comutClosure = (closureForFn) => {
  if (closureForFn.context.counter === closureForFn.context.max) closureForFn.flags.kill = true;
  else closureForFn.context.counter++;
  return closureForFn;
};


const timer = artus.bind(null, communis);

module.exports = { timer };
