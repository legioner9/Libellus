'use strict';

const clone = val => {
  if (typeof val !== 'object' || val === null) {
    return val;
  }
  const objOrArray = Array.isArray(val) ? new Array(val.length) : {};
  for (const key in val) {
    if (Object.prototype.hasOwnProperty.call(val, key)) {
      objOrArray[key] = clone(val[key]);
    }
  }
  return objOrArray;
};

const o1 = {};
const o2 = clone(o1);
const o3 = o1;

const { artus } = require('v.2');

artus.fascis.returnBfn = (bfn, closureForFn) => {
  if (!closureForFn.flags.kill) {
    return bfn;
  } else return undefined;
};

artus.fascis.comutClosure = (closureForFn) => {
  if (closureForFn.context.counter === closureForFn.context.max) closureForFn.flags.kill = true;
  else closureForFn.context.counter++;
  return closureForFn;
};


// propObj.closureForFn.context.max = 2;

const fn = function(...args) {
  console.log( args, this );
};

// Use

// const artusFn = artus(fn).limit(2).timer(200);
const artusFn = artus(fn).limit(2).timer(200);
;
// artusFn.limit(2).timer(200);

artusFn(0);

console.log(artusFn.getOperati().args, artusFn.getOperati().closureForFn.flags.kill);

setTimeout(() => {
  artusFn('primus');
  console.log(artusFn.getOperati().args, artusFn.getOperati().closureForFn.flags.kill);
}, 100);

setTimeout(() => {
  artusFn('secundus');
  console.log(artusFn.getOperati().args, artusFn.getOperati().closureForFn.flags.kill);
}, 500);



