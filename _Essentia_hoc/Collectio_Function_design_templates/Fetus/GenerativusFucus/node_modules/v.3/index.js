'use strict';

const propObj = {
  preComutClosure: (closureForFn) => closureForFn,
  comutClosure: (closureForFn) => closureForFn,
  closureToMoresFn: (bfn, closureForFn) => (closureForFn, bfn),
  returnBfn: (bfn, closureForFn) => (closureForFn, bfn),
  methods: {},
  closureForFn: {
    context: {
      max: 0,
      counter: 0,
    },
    time: { msec: 0, },
    timer: {
      timeout: null,
      interval: null,},
    flags: {
      kill: false,
    }
  },
  thisForFn: {},
};

const generativusFucus = (propObj, fn) => {

  propObj.closureForFn = propObj.preComutClosure(propObj.closureForFn);

  const fucus = function(...args) {

    const bfn = fn.bind(propObj.thisForFn);
    const properties = {
      bfn: bfn,
      args: args,
      closureForFn: propObj.closureForFn,
      thisForFn: propObj.thisForFn,
    };
    // comutatus fn
    const moresFn = propObj.closureToMoresFn(bfn, propObj.closureForFn);
    // comutatus closure
    propObj.closureForFn = propObj.comutClosure(propObj.closureForFn);
    // reditum moresFn
    propObj.returnBfn(moresFn, propObj.closureForFn)(...args);
    Object.assign(fucus, properties);
  };
  return Object.assign(fucus, propObj.methods);
};


// const fn = function(...args) {
//   console.dir({ args, this: this });
// };

// Use

// const fucus = generativusFucus(propObj, fn);
// fucus('a');
// fucus('b');


// methods fucus:
// fucus.printFn();

// fucus (as a functional object) after call has the following properties:
// const { args, closureForFn, thisForFn } = fucus;
// console.dir({ args, closureForFn, thisForFn });

module.exports = {
  propObj,
  generativusFucus,
};
