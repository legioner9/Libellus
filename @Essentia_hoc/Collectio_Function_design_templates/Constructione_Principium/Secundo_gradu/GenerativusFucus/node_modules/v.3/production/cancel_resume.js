'use strict';

const { propObj, generativusFucus } = require('v.2');

propObj.returnBfn = (bfn, closureForFn) => {
  if (!closureForFn.flags.kill) {
    return bfn;
  } else return () => undefined;
};

propObj.comutClosure = (closureForFn) => {
  if (closureForFn.context.counter === closureForFn.context.max) closureForFn.flags.kill = true;
  else closureForFn.context.counter++;
  return closureForFn;
};

propObj.methods = {
  printFn() {
    console.log(propObj.closureForFn.bfn);
    return this;
  },
  limit(max = 0) {
    propObj.closureForFn.context.max = max;
    return this;
  },
  timer(msec = 0) {
    const ms = propObj.closureForFn.time.msec = msec;
    const timer_ = setTimeout(() => {
      propObj.closureForFn.flags.kill = true;
      timer_.close();
    }, ms);
    return this;
  },
  cancel() {
    propObj.closureForFn.flags.kill = true;
  },
  resume(){
    propObj.closureForFn.flags.kill = false;
  },
};


// propObj.closureForFn.context.max = 2;

const fn = function(...args) {
  console.dir({ args, this: this });
};

// Use
debugger
const fucus = generativusFucus(propObj, fn).limit(3).timer(200);
fucus('a');
console.dir( fucus.closureForFn.flags.kill  );
fucus.cancel();
fucus('b');
console.dir(fucus.closureForFn.flags.kill );
fucus.resume()
fucus('c');
console.dir(fucus.closureForFn.flags.kill );
debugger
